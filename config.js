/**
 * @file config.js
 * @brief スロットゲームの動作に関わる全ての設定を管理します。
 * @details このファイルの値は、script.jsから参照されます。
 *          ゲームの見た目や挙動、確率などを変更したい場合は、まずこのファイルを確認・編集してください。
 */

// ゲーム全体の設定を管理するオブジェクト
const gameConfig = {
	// --- DOM要素のセレクタ ---
	// 備考: HTMLに記述された要素のidやclassを変更した場合は、ここの値を修正する必要があります。
	//       script.js側での変更は不要です。
	selectors: {
		slotMachine: '#slot-machine', // スロットマシン本体のコンテナdiv
		actionBtn: '#actionBtn',       // 「スタート/ストップ」ボタン
		modeBtn: '#modeBtn',         // 「モード切替」ボタン
	},

	// --- ゲームの基本設定 ---
	reelCount: 3,          // リールの本数。3以外に変更する場合は、リールごとの設定(reelsDataなど)も本数に合わせて調整が必要です。
	symbolHeight: 80,      // 1シンボルあたりの高さ(px)。style.cssの`.reel-symbol`の`height`と一致させる必要があります。
	symbolDuplicationFactor: 2, // 無限スクロールを滑らかに見せるため、リール内のシンボルを何周分複製するか。値を大きくするとメモリ使用量が増えます。

	// --- リールのシンボル構成 ---
	// 注意: 各リールに表示されるシンボルの配列です。
	//       シンボルの並び順や数を変更すると、リールの見た目や挙動、確率計算に直接影響します。
	//       特に、狙い撃ち機能(`stopTargets`)でインデックス指定をする際は、この配列の並び順が基準となります。
	reelsData: [
		['🍌', '🍋', '🍎', '🍌', '🍋', '💎', '🍉', '🍌', '🍋', 'BAR', '🍒', '🍎', '🍌', '🍋', '🍉', '🍌', '🍋', '7️⃣', '🍇', '7️⃣', '🍇'], // 左リール (インデックス 0)
		['🍌', '🍒', '🍋', '🍌', '🍎', '💎', '🍉', '🍋', '🍌', '🍒', 'BAR', '🍒', '🍋', '🍌', '🍉', '🍋', '🍌', '🍇', '7️⃣', '🍇', '🍋'], // 中央リール (インデックス 1)
		['🍋', '🍎', '🍌', '🍋', '🍉', '💎', '🍌', '🍋', '🍒', 'BAR', '🍌', '🍋', '🍉', '🍎', '🍌', '🍋', '🍇', '7️⃣', '🍇', '7️⃣', '🍌']  // 右リール (インデックス 2)
	],

	// --- シンボル出現確率 (通常スピン時) ---
	// 備考: この設定は、当たり演出が発生しない通常のスピン時に、どのシンボルを停止位置の目標にするかを決めるための重み付けです。
	//       `winSymbolWeights`とは役割が異なります。
	//       重みが大きいほど、そのシンボルが選ばれやすくなります。
	symbolProbabilities: [
		{ symbol: '7️⃣', weight: 1 },
		{ symbol: 'BAR', weight: 10 },
		{ symbol: '💎', weight: 15 },
		{ symbol: '🍉', weight: 20 },
		{ symbol: '🍎', weight: 25 },
		{ symbol: '🍋', weight: 500 },
		{ symbol: '🍒', weight: 35 },
		{ symbol: '🍌', weight: 40 },
		{ symbol: '🍇', weight: 5 }
	],


	// --- ゲーム開始時の状態 ---
	initialReelPositions: [17, 17, 17], // 各リールの初期表示シンボルのインデックス番号。
	initialIsAutoMode: true,             // 初期モード。trueなら「自動」、falseなら「目押し」。

	// --- アニメーションと速度設定 ---
	autoSpeed: 40,         // 自動モード時のリール回転速度 (px/フレーム)。大きいほど速い。
	manualSpeed: 20,       // 目押しモード時のリール回転速度 (px/フレーム)。
	accelerationTime: 250, // スピン開始から最高速に達するまでの時間 (ミリ秒)。
	minStopAnimTime: 750,  // 停止ボタンを押してから実際に停止するまでの最低アニメーション時間 (ミリ秒)。
	maxStopAnimTime: 1000, // 停止ボタンを押してから実際に停止するまでの最大アニメーション時間 (ミリ秒)。
	reverseRotation: true, // リールの回転方向。true: 下から上へ, false: 上から下へ。
	stopEasing: 'cubic',   // 停止時の減速アニメーションの種類。'cubic', 'quad', 'sine', 'linear'から選択。
	stopBaseDurationMs: 240, // 自動停止時の減速にかかる基本時間 (ミリ秒)。

	// --- 自動モード設定 (新方式) ---
	// 備考: 左リールが停止してから、全リールが停止するまでの時間を制御します。
	//       複雑な計算式がコメントにありましたが、より直感的に理解できるよう整理しました。
	//       (reelCount - 1) * minSequentialStopGapMs <= autoStopMaxTime - autoStopMinTime を満たす必要があります。
	autoStopMinTime: 1000,               // スピン開始から最初の(左)リールが停止し始めるまでの最短時間 (ミリ秒)。
	autoStopMaxTime: 1500,               // スピン開始から最後の(右)リールが完全に停止するまでの最長時間 (ミリ秒)。
	minSequentialStopGapMs: 100,         // 各リールが停止し始める間の最低時間 (ミリ秒)。リール間の停止タイミングを制御します。

	/* --- (旧方式: 現在は不使用・互換維持のための参考) ---
	 * かつては各リールの停止時刻を明示的に配列で与えていました。
	 * 現行は min/max の範囲から均等ベース+ジッターで算出するため、この2設定は使用していません。
	 * 復活させる場合は script.js の startGame 内の該当ブロックも復旧し、
	 * minSequentialStopGapMs を下回らないように調整する必要があります。
	 *
	 * 例:
	 * // autoStopTimings: [1800, 2400, 3000], // 各リールの自動停止タイミング (ms)
	 * // autoStopTimeRandomness: 300,         // 自動停止タイミングのランダム揺らぎ (ms)
	 */

	// --- 狙い撃ち停止設定 (自動モード時) ---
	// 用途: 特定の絵柄を特定の位置に意図的に停止させたい場合に使用します。(デバッグや演出目的)
	//      この設定は `targetActivationProbability` が 1 に近いほど優先されます。
	// 例: 中央リール(index:1)に'7️⃣'を、上段('top')に停止させる場合: { reelIndex: 1, symbol: '7️⃣', position: 'top' }
	stopTargets: [
		// { reelIndex: 1, symbol: '7️⃣' },
		// { reelIndex: 0, symbol: '7️⃣' },
		// { reelIndex: 2, symbol: '7️⃣' },
	],

	// `stopTargets`の設定を有効にする確率 (0.0 ~ 1.0)。
	// 1.0にすると常に狙い撃ちを試みます。開発中のテストに便利です。
	targetActivationProbability: 1,

	// --- 当たり演出制御 ---
	// 備考: ここで設定した確率で、水平または斜めの当たり演出が発動します。
	winHorizontalProbability: 0.6, // 水平ラインで当たりを発生させる確率 (0.0 ~ 1.0)。
	winDiagonalProbability: 0.4,   // 斜めラインで当たりを発生させる確率 (0.0 ~ 1.0)。

	/* --- (旧方式: 後方互換のための参考) ---
	 * かつては水平/斜めの区別がなく、単一の発動確率で制御していました。
	 * 二軸化により挙動が分かりやすくなったため非推奨です。
	 * 例: // winActivationProbability: 0.5,
	 */

	// 当たり演出時に、どの絵柄を揃えるかの重み付け。
	// `symbolProbabilities`とは異なり、当たりが確定した際に使用されます。
	winSymbolWeights: {
		'7️⃣': 1,
		'BAR': 10,
		'💎': 15,
		'🍉': 20,
		'🍎': 25,
		'🍒': 35,
		'🍌': 40,
		'🍋': 60,
		'🍇': 5
	},
	// 当たりを揃えるライン。'top', 'middle', 'bottom', 'random' から選択。
	winRowMode: 'random',
	// 斜め当たりの方向。'down'(右下がり), 'up'(右上がり), 'random' から選択。
	winDiagonalMode: 'random',

	// --- デバッグ設定 ---
	// 備考: 開発中にブラウザのコンソールにログを出力するための設定です。
	//       `true`にすると、ゲームの内部的な動作を確認できますが、パフォーマンスに影響する場合があります。
	debug: {
		stopLogs: false,  // trueにすると停止計算の詳細ログを出力。開発・検証時のみ推奨。
		frameLogs: false, // trueにするとフレームごとのログを大量出力。実運用では必ずfalseのままにしてください。
	},

	// --- ファイナンス設定 ---
	// デフォルトのプレイヤー残高（ローカル開始時の初期値）
	initialBalance: 1000,
	// 賭け金の最小値
	minBet: 1,

	// --- 借金(クレジット)設定 ---
	// enabled: 借金機能を有効にするか
	// creditLimit: プレイヤーが最大で借りられる金額（利息前の元本）
	// interestRate: 借入時に即時適用する利率（例: 0.1 = 10%）。利息モデルは単純化して即時一括で計上します。
	credit: {
		enabled: true,
		creditLimit: 50000,
		interestRate: 0.10
	},
	// 簡易ペイアウトテーブル: key はシンボルあるいはシンボル種別
	// 値は賭け金に対する倍率（例: 10 倍なら return bet * 10）
	payoutTable: {
		'7️⃣': 50, // '7' 揃いは高配当
		'BAR': 20,
		'💎': 10,
		'🍉': 8,
		'🍎': 6,
		'🍋': 1,
		'🍒': 4,
		'🍌': 3,
		'🍇': 5
	}
};